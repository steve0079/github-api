{"version":3,"sources":["components/Search.js","components/GithubUser.js","components/Followers.js","components/Following.js","components/GithubRepo.js","components/Repos.js","components/User.js","App.js","index.js"],"names":["Search","props","useState","userInput","setUserInput","className","onSubmit","e","preventDefault","history","push","value","onChange","target","type","GithubUser","user","to","login","src","avatar_url","alt","Followers","page","setPage","followers","setFollowers","infiniteLoadBeginEdgeOffsetState","setInfinite","fetchData","a","axios","match","params","username","result","data","length","concat","undefined","useEffect","isInfiniteLoading","onInfiniteLoad","useWindowAsScrollContainer","elementHeight","infiniteLoadBeginEdgeOffset","loadingSpinnerDelegate","width","height","map","key","id","Following","following","setFollowing","GithubRepo","repo","href","html_url","stargazers_count","Repos","repos","setRepos","User","setUser","stats","name","public_repos","url","bio","stat","path","component","App","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e9268c2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n/*\r\nThis component displays a form where the user can enter a GitHub username\r\nWhen they submit the form either by pressing ENTER or clicking the button,\r\nwe will use react-router's history.push function to push a new URL to the history.\r\n\r\nThis will have as an effect to navigate to a new URL, which will display the User component\r\nWhy are we doing this instead of using a <Link>? The answer is straightforward, but make sure you understand!!!\r\n*/\r\nconst Search = (props) => {\r\n\r\n    const [userInput, setUserInput] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        props.history.push(`/user/${userInput}`)\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-page\">\r\n            <h2>Enter a GitHub username</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <input value={userInput} onChange={e => { setUserInput(e.target.value)}} className=\"search-page__input\" type=\"text\" />\r\n                <button className=\"search-page__button\">Search</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react'\nimport { Link } from 'react-router-dom';\n\n\nconst GithubUser = ({ user }) => {\n    return (\n        <div className=\"user-info\">\n            <Link to={`/user/${user.login}`}>\n                <img className=\"user-info__avatar\" src={user.avatar_url} alt=\"Avatar\" />\n                <span className=\"user-info__text\">{user.login}</span>\n            </Link>\n        </div>\n    );\n}\n\nexport default GithubUser;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Infinite from 'react-infinite';\nimport GithubUser from './GithubUser';\n\nconst Followers = (props) => {\n\n    const [page, setPage] = useState(1);\n    const [followers, setFollowers] = useState([]);\n    const [infiniteLoadBeginEdgeOffsetState, setInfinite] = useState(10);\n\n    const fetchData = async () => {\n        const result = await axios(\n            `https://api.github.com/users/${props.match.params.username}/followers?page={page}&per_page=50`\n        );\n\n        if (result.data.length > 0) {\n            setFollowers(followers.concat(result.data))\n            setPage(page + 1)\n        } else {\n            setInfinite(undefined);\n        }\n    };\n\n    useEffect(() => {\n        fetchData();\n    }, [fetchData, props.match.params.username]);\n\n    // return !followers\n    //     ? <div>LOADING FOLLOWERS...</div>\n    //     : <div className=\"followers-page\">\n    //         <h2>Followers of {props.match.params.username}</h2>\n    //         {followers.map(user => <GithubUser user={user} />)}\n    //     </div>\n\n    return (\n        <div className=\"followers-page\">\n            <div className=\"followers-header\">\n                <h2>Followers of {props.match.params.username}</h2>\n            </div>\n            {!followers ?\n                <div className=\"followers-header\">\n                    <h2>Loading Followers of {props.match.params.username}</h2>\n                </div> : null}\n            <Infinite className=\"followers-scroll\"\n                isInfiniteLoading={!followers}\n                onInfiniteLoad={fetchData}\n                useWindowAsScrollContainer={true}\n                elementHeight={50}\n                infiniteLoadBeginEdgeOffset={infiniteLoadBeginEdgeOffsetState}\n                loadingSpinnerDelegate={<div\n                    className=\"loading-div\">\n                    <img src=\"https://media.giphy.com/media/3o7bu8sRnYpTOG1p8k/giphy.gif\"\n                        alt=\"Loading\"\n                        width=\"42\"\n                        height=\"42\" /> </div>} >\n                {\n                    followers.map(user => <GithubUser user={user} key={user.id}/>)\n                }\n            </Infinite>\n        </div>\n    )\n};\n\nexport default Followers;","import React, { useState, useEffect } from 'react'\nimport GithubUser from './GithubUser';\nimport axios from 'axios'\nimport Infinite from 'react-infinite';\n\nconst Following = (props) => {\n\n    const [page, setPage] = useState(1);\n    const [following, setFollowing] = useState([]);\n    const [infiniteLoadBeginEdgeOffsetState, setInfinite] = useState(10);\n\n    const fetchData = async () => {\n        const result = await axios(\n            `https://api.github.com/users/${props.match.params.username}/following?page={page}&per_page=50`\n        );\n\n        if (result.data.length > 0) { // if we have more new items\n            setFollowing(following.concat(result.data));\n            setPage(page + 1);\n        } else {\n            setInfinite(undefined);\n        }\n    };\n\n    useEffect(() => {\n        fetchData();\n    }, [fetchData, props.match.params.username]);\n\n\n    // return !following\n    //     ? <div>LOADING FOLLOWING...</div>\n    //     : <div className=\"following-page\">\n    //         <h2>Followed by {props.match.params.username}</h2>\n    //         {/* <ul> */}\n    //             {following.map(user => <GithubUser user={user}/>)}\n    //         {/* </ul> */}\n    //     </div>\n\n    return (\n        <div className=\"following-page\" >\n            <div className=\"following-header\">\n                <h2>{props.match.params.username} is following</h2>\n            </div>\n            {!following ?\n                <div className=\"following-header\">\n                    <h2>Loading who {props.match.params.username} is following</h2>\n                </div> : null}\n            <Infinite className=\"following-scroll\" \n                isInfiniteLoading={!following} \n                onInfiniteLoad={fetchData} \n                useWindowAsScrollContainer={true} \n                elementHeight={50} \n                infiniteLoadBeginEdgeOffset={infiniteLoadBeginEdgeOffsetState} \n                loadingSpinnerDelegate={<div className=\"loading-div\"> \n                <img \n                    src=\"https://media.giphy.com/media/3o7bu8sRnYpTOG1p8k/giphy.gif\" \n                    alt=\"Loading\" \n                    width=\"42\" \n                    height=\"42\" /></div>} >\n                {\n                    following.map(user =>\n                        <GithubUser user={user} key={user.id} />\n                    )\n                }\n            </Infinite>\n        </div>\n    )\n\n}\n\nexport default Following;","import React from 'react'\n\nconst GithubRepo = ({ repo }) => {\n    return (\n        <div className=\"repo-div\">\n            <a href={`${repo.html_url}`}>\n            <span>{repo.html_url}</span>\n            </a>\n            {repo.stargazers_count}\n            <img src=\"https://i.imgur.com/g0gbFkV.png\" alt=\"stars\" className=\"repo-star\"/>\n        </div>\n    );\n}\n\nexport default GithubRepo;","import React, { useState, useEffect } from 'react'\nimport GithubRepo from './GithubRepo';\nimport axios from 'axios'\nimport Infinite from 'react-infinite';\n\nconst Repos = (props) => {\n\n    const [page, setPage] = useState(1);\n    const [repos, setRepos] = useState([]);\n    const [infiniteLoadBeginEdgeOffsetState, setInfinite] = useState(10);\n\n    const fetchData = async () => {\n        const result = await axios(\n            `https://api.github.com/users/${props.match.params.username}/repos?page={page}&per_page=50`\n        );\n\n        if (result.data.length > 0) { // if we have more new items\n            setRepos(repos.concat(result.data));\n            setPage(page + 1);\n        } else {\n            setInfinite(undefined);\n        }\n    };\n\n    useEffect(() => {\n        fetchData();\n    }, [fetchData, props.match.params.username]);\n\n\n    // return !repos\n    //     ? <div>LOADING REPOS...</div>\n    //     : <div className=\"repos-page\">\n    //         <h2>{props.match.params.username}'s repos</h2>\n    //         {repos.map(repo => <GithubRepo repo={repo} />)}\n    //     </div>\n\n    return (\n        <div className=\"repos-page\" >\n            <div className=\"repos-header\">\n                <h2>{props.match.params.username}'s repos</h2>\n            </div>\n            {!repos ?\n                <div className=\"repos-header\">\n                    <h2>Loading followers of {props.match.params.username}</h2>\n                </div> : null}\n            <Infinite className=\"repos-scroll\" isInfiniteLoading={!repos} onInfiniteLoad={fetchData} useWindowAsScrollContainer={true} elementHeight={50} infiniteLoadBeginEdgeOffset={infiniteLoadBeginEdgeOffsetState} loadingSpinnerDelegate={<div className=\"loading-div\"> <img src=\"https://media.giphy.com/media/3o7bu8sRnYpTOG1p8k/giphy.gif\" alt=\"Loading\" width=\"42\" height=\"42\" /> </div>} >\n                {\n                    repos.map(repo =>\n                        <GithubRepo repo={repo} key={repo.id} />\n                    )\n                }\n            </Infinite>\n        </div>\n    )\n\n}\n\nexport default Repos;","import React, { useState, useEffect } from 'react';\r\nimport { Link, Route } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Followers from './Followers';\r\nimport Following from './Following';\r\nimport Repos from './Repos';\r\n\r\nconst User = (props) => {\r\n\r\n    const [user, setUser] = useState({});\r\n\r\n    const stats = [\r\n        {\r\n            name: 'Public Repos',\r\n            value: user.public_repos,\r\n            url: `/user/${props.match.params.username}/repos`\r\n        },\r\n        {\r\n            name: 'Followers',\r\n            value: user.followers,\r\n            url: `/user/${props.match.params.username}/followers`\r\n        },\r\n        {\r\n            name: 'Following',\r\n            value: user.following,\r\n            url: `/user/${props.match.params.username}/following`\r\n        }\r\n    ];\r\n\r\n    /*\r\n    This method will be called by React after the first render. It's a perfect place to load data with AJAX. \r\n    This User component gets mounted in the DOM as soon as the URL is /user/:username\r\n\r\n    When that happens, react-router will pass a `params` prop containing every parameter in the URL. \r\n    Here, it's props.match.params. Since we called our route parameter `username`, it's available \r\n    under props.match.params.username\r\n\r\n    We're using it to make an API call to GitHub to fetch the user data for the username in the URL. \r\n    Once we receive the data -- in the callback -- we put the user data in our state. This will trigger a re-render.\r\n    When `render` gets called again, `user` exists and we get the user info display instead of \"LOADING...\"\r\n    */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await axios(\r\n                `https://api.github.com/users/${props.match.params.username}`\r\n            );\r\n            setUser(result.data);\r\n        };\r\n\r\n        fetchData();\r\n    }, [props.match.params.username]);\r\n\r\n\r\n    /*\r\n    This method is used as a mapping function. Eventually this could be factored out to its own component.\r\n    */\r\n    const renderStat = (stat) => {\r\n        return (\r\n            <li key={stat.name} className=\"user-info__stat\">\r\n                <Link to={stat.url}>\r\n                    <p className=\"user-info__stat-value\">{stat.value}</p>\r\n                    <p className=\"user-info__stat-name\">{stat.name}</p>\r\n                </Link>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    return !user\r\n        // If the state doesn't have a user key, it means the AJAX didn't complete yet. Simply render a LOADING indicator.\r\n        ? <div className=\"user-page\">LOADING...</div>\r\n        : (\r\n            <div className=\"user-page\">\r\n                <div className=\"user-info\">\r\n                    <Link className=\"user-info__text\" to={`/user/${user.login}`}>\r\n                        <img className=\"user-info__avatar\" src={user.avatar_url} alt={`${user.login} avatar`} />\r\n                        <h2 className=\"user-info__title\">{user.login} ({user.name})</h2>\r\n                        <p className=\"user-info__bio\">{user.bio}</p>\r\n                    </Link>\r\n\r\n                    <ul className=\"user-info__stats\">\r\n                        {stats.map(renderStat)}\r\n                    </ul>\r\n                </div>\r\n                <Route path={`${props.match.path}/followers`} component={Followers}/>\r\n                <Route path={`${props.match.path}/following`} component={Following}/>\r\n                <Route path={`${props.match.path}/repos`} component={Repos}/>\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport { Link, Switch, Route } from 'react-router-dom';\r\nimport Search from './components/Search';\r\nimport User from './components/User';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"main-app\">\r\n            <header className=\"main-header\">\r\n                <h1><Link to=\"/\">React GitHub Project</Link></h1>\r\n            </header>\r\n            <main className=\"main-content\">\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={Search} />\r\n                    <Route path=\"/user/:username\" component={User} />\r\n                </Switch>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\r\n"],"sourceRoot":""}